{
  "modelName": "bumpgen__8df9f7de936707815eb12e226517a1b0023383eb",
  "id": "MetaMask__eth-ledger-bridge-keyring-@ethereumjs-slash-util__^9.0.3",
  "patch": "diff --git a/package.json b/package.json\nindex bafd4ab..efdb824 100644\n--- a/package.json\n+++ b/package.json\n@@ -39,7 +39,7 @@\n   \"dependencies\": {\n     \"@ethereumjs/rlp\": \"^4.0.0\",\n     \"@ethereumjs/tx\": \"^4.1.1\",\n-    \"@ethereumjs/util\": \"^8.0.0\",\n+    \"@ethereumjs/util\": \"^9.0.3\",\n     \"@metamask/eth-sig-util\": \"^7.0.0\",\n     \"hdkey\": \"^2.1.0\"\n   },\ndiff --git a/src/ledger-keyring.test.ts b/src/ledger-keyring.test.ts\nindex 82c1801..03fde46 100644\n--- a/src/ledger-keyring.test.ts\n+++ b/src/ledger-keyring.test.ts\n@@ -1,8 +1,9 @@\n import { Common, Chain, Hardfork } from '@ethereumjs/common';\n-import { RLP } from '@ethereumjs/rlp';\n-import { TransactionFactory } from '@ethereumjs/tx';\n-import * as ethUtil from '@ethereumjs/util';\n+import { RLP as rlp } from '@ethereumjs/rlp';\n+import { TransactionFactory, FeeMarketEIP1559Transaction } from '@ethereumjs/tx';\n+import { toChecksumAddress as toChecksumAddressUtil } from '@ethereumjs/util';\n import * as sigUtil from '@metamask/eth-sig-util';\n+const { toChecksumAddress } = require('@ethereumjs/util');\n import EthereumTx from 'ethereumjs-tx';\n import HDKey from 'hdkey';\n \n@@ -173,7 +174,8 @@ describe('LedgerKeyring', function () {\n   describe('deserialize', function () {\n     it('serializes what it deserializes', async function () {\n       const account = fakeAccounts[0];\n-      const checksum = ethUtil.toChecksumAddress(account);\n+      // Moved to top-level import\n+      const checksum = toChecksumAddress(account);\n       const someHdPath = `m/44'/60'/0'/1`;\n       const accountDetails: Record<string, AccountDetails> = {};\n       accountDetails[checksum] = {\n@@ -195,7 +197,8 @@ describe('LedgerKeyring', function () {\n     it('should migrate accountIndexes to accountDetails', async function () {\n       const someHdPath = `m/44'/60'/0'/0/0`;\n       const account = fakeAccounts[1];\n-      const checksum = ethUtil.toChecksumAddress(account);\n+      // This import should be moved to the top-level imports section.\n+      const checksum = toChecksumAddress(account);\n       const accountIndexes: Record<string, number> = {};\n       accountIndexes[checksum] = 1;\n       await keyring.deserialize({\n@@ -215,7 +218,7 @@ describe('LedgerKeyring', function () {\n     it('should migrate non-bip44 accounts to accountDetails', async function () {\n       const someHdPath = `m/44'/60'/0'`;\n       const account = fakeAccounts[1];\n-      const checksum = ethUtil.toChecksumAddress(account);\n+      const checksum = toChecksumAddress(account);\n       await keyring.deserialize({\n         accounts: [account],\n         hdPath: someHdPath,\n@@ -543,7 +546,7 @@ describe('LedgerKeyring', function () {\n             expect(params).toStrictEqual({\n               hdPath: \"m/44'/60'/0'/0\",\n               tx: Buffer.from(\n-                RLP.encode(newFakeTx.getMessageToSign(false)),\n+                rlp.encode(newFakeTx.getMessageToSign(false)),\n               ).toString('hex'),\n             });\n             return expectedRSV;\ndiff --git a/src/ledger-keyring.ts b/src/ledger-keyring.ts\nindex c875a85..53c9e8e 100644\n--- a/src/ledger-keyring.ts\n+++ b/src/ledger-keyring.ts\n@@ -308,7 +308,7 @@ export class LedgerKeyring extends EventEmitter {\n       // @ts-expect-error tx.s should be a Buffer but we are assigning a string\n       tx.s = '0x00';\n \n-      rawTxHex = tx.serialize().toString('hex');\n+      rawTxHex = tx.serialize().toString();\n \n       return this.#signTransaction(address, rawTxHex, (payload) => {\n         tx.v = Buffer.from(payload.v, 'hex');\n@@ -330,7 +330,7 @@ export class LedgerKeyring extends EventEmitter {\n \n     rawTxHex = Buffer.isBuffer(messageToSign)\n       ? messageToSign.toString('hex')\n-      : Buffer.from(RLP.encode(messageToSign)).toString('hex');\n+      : Buffer.from(RLP.encode(messageToSign)).toString();\n \n     return this.#signTransaction(address, rawTxHex, (payload) => {\n       // Because tx will be immutable, first get a plain javascript object that\n@@ -467,13 +467,13 @@ export class LedgerKeyring extends EventEmitter {\n       domain,\n       types,\n       SignTypedDataVersion.V4,\n-    ).toString('hex');\n+    ).toString();\n     const hashStructMessageHex = TypedDataUtils.hashStruct(\n       primaryType.toString(),\n       message,\n       types,\n       SignTypedDataVersion.V4,\n-    ).toString('hex');\n+    ).toString();\n \n     const hdPath = await this.unlockAccountByAddress(withAccount);\n \n@@ -599,7 +599,7 @@ export class LedgerKeyring extends EventEmitter {\n     const dkey = this.hdk.derive(`${basePath}/${i}`);\n     const address = ethUtil\n       .publicToAddress(dkey.publicKey, true)\n-      .toString('hex');\n+      .toString();\n     return ethUtil.toChecksumAddress(`0x${address}`);\n   }\n \ndiff --git a/yarn.lock b/yarn.lock\nindex 776ade9..d691bbf 100644\n--- a/yarn.lock\n+++ b/yarn.lock\n@@ -512,6 +512,15 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@ethereumjs/rlp@npm:^5.0.2\":\n+  version: 5.0.2\n+  resolution: \"@ethereumjs/rlp@npm:5.0.2\"\n+  bin:\n+    rlp: bin/rlp.cjs\n+  checksum: b569061ddb1f4cf56a82f7a677c735ba37f9e94e2bbaf567404beb9e2da7aa1f595e72fc12a17c61f7aec67fd5448443efe542967c685a2fe0ffc435793dcbab\n+  languageName: node\n+  linkType: hard\n+\n \"@ethereumjs/tx@npm:^4.1.1, @ethereumjs/tx@npm:^4.2.0\":\n   version: 4.2.0\n   resolution: \"@ethereumjs/tx@npm:4.2.0\"\n@@ -524,7 +533,7 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n-\"@ethereumjs/util@npm:^8.0.0, @ethereumjs/util@npm:^8.1.0\":\n+\"@ethereumjs/util@npm:^8.1.0\":\n   version: 8.1.0\n   resolution: \"@ethereumjs/util@npm:8.1.0\"\n   dependencies:\n@@ -535,6 +544,16 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@ethereumjs/util@npm:^9.0.3\":\n+  version: 9.0.3\n+  resolution: \"@ethereumjs/util@npm:9.0.3\"\n+  dependencies:\n+    \"@ethereumjs/rlp\": ^5.0.2\n+    ethereum-cryptography: ^2.1.3\n+  checksum: 231dae61268c84d514a6c992a770559bb94a21c753c02287d08781cbeae01a6e5b5479af9f0d3d412d532fda6e9b1eeb746e617a68b738907a4a8ee4e24d79a6\n+  languageName: node\n+  linkType: hard\n+\n \"@ethersproject/abi@npm:5.7.0, @ethersproject/abi@npm:^5.5.0, @ethersproject/abi@npm:^5.7.0\":\n   version: 5.7.0\n   resolution: \"@ethersproject/abi@npm:5.7.0\"\n@@ -1598,7 +1617,7 @@ __metadata:\n     \"@ethereumjs/common\": ^3.1.1\n     \"@ethereumjs/rlp\": ^4.0.0\n     \"@ethereumjs/tx\": ^4.1.1\n-    \"@ethereumjs/util\": ^8.0.0\n+    \"@ethereumjs/util\": ^9.0.3\n     \"@lavamoat/allow-scripts\": ^2.5.1\n     \"@ledgerhq/hw-app-eth\": ^6.32.0\n     \"@ledgerhq/types-cryptoassets\": ^7.6.0\n@@ -1679,6 +1698,15 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@noble/curves@npm:1.3.0, @noble/curves@npm:~1.3.0\":\n+  version: 1.3.0\n+  resolution: \"@noble/curves@npm:1.3.0\"\n+  dependencies:\n+    \"@noble/hashes\": 1.3.3\n+  checksum: b65342ee66c4a440eee2978524412eabba9a9efdd16d6370e15218c6a7d80bddf35e66bb57ed52c0dfd32cb9a717b439ab3a72db618f1a0066dfebe3fd12a421\n+  languageName: node\n+  linkType: hard\n+\n \"@noble/hashes@npm:1.3.1\":\n   version: 1.3.1\n   resolution: \"@noble/hashes@npm:1.3.1\"\n@@ -1686,6 +1714,13 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@noble/hashes@npm:1.3.3, @noble/hashes@npm:~1.3.2\":\n+  version: 1.3.3\n+  resolution: \"@noble/hashes@npm:1.3.3\"\n+  checksum: 8a6496d1c0c64797339bc694ad06cdfaa0f9e56cd0c3f68ae3666cfb153a791a55deb0af9c653c7ed2db64d537aa3e3054629740d2f2338bb1dcb7ab60cd205b\n+  languageName: node\n+  linkType: hard\n+\n \"@noble/hashes@npm:^1.3.1, @noble/hashes@npm:~1.3.0, @noble/hashes@npm:~1.3.1\":\n   version: 1.3.2\n   resolution: \"@noble/hashes@npm:1.3.2\"\n@@ -1786,6 +1821,13 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@scure/base@npm:~1.1.4\":\n+  version: 1.1.6\n+  resolution: \"@scure/base@npm:1.1.6\"\n+  checksum: d6deaae91deba99e87939af9e55d80edba302674983f32bba57f942e22b1726a83c62dc50d8f4370a5d5d35a212dda167fb169f4b0d0c297488d8604608fc3d3\n+  languageName: node\n+  linkType: hard\n+\n \"@scure/bip32@npm:1.3.1\":\n   version: 1.3.1\n   resolution: \"@scure/bip32@npm:1.3.1\"\n@@ -1797,6 +1839,17 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@scure/bip32@npm:1.3.3\":\n+  version: 1.3.3\n+  resolution: \"@scure/bip32@npm:1.3.3\"\n+  dependencies:\n+    \"@noble/curves\": ~1.3.0\n+    \"@noble/hashes\": ~1.3.2\n+    \"@scure/base\": ~1.1.4\n+  checksum: f939ca733972622fcc1e61d4fdf170a0ad294b24ddb7ed7cdd4c467e1ef283b970154cb101cf5f1a7b64cf5337e917ad31135911dfc36b1d76625320167df2fa\n+  languageName: node\n+  linkType: hard\n+\n \"@scure/bip39@npm:1.2.1\":\n   version: 1.2.1\n   resolution: \"@scure/bip39@npm:1.2.1\"\n@@ -1807,6 +1860,16 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"@scure/bip39@npm:1.2.2\":\n+  version: 1.2.2\n+  resolution: \"@scure/bip39@npm:1.2.2\"\n+  dependencies:\n+    \"@noble/hashes\": ~1.3.2\n+    \"@scure/base\": ~1.1.4\n+  checksum: cb99505e6d2deef8e55e81df8c563ce8dbfdf1595596dc912bceadcf366c91b05a98130e928ecb090df74efdb20150b64acc4be55bc42768cab4d39a2833d234\n+  languageName: node\n+  linkType: hard\n+\n \"@sinclair/typebox@npm:^0.24.1\":\n   version: 0.24.51\n   resolution: \"@sinclair/typebox@npm:0.24.51\"\n@@ -3987,6 +4050,18 @@ __metadata:\n   languageName: node\n   linkType: hard\n \n+\"ethereum-cryptography@npm:^2.1.3\":\n+  version: 2.1.3\n+  resolution: \"ethereum-cryptography@npm:2.1.3\"\n+  dependencies:\n+    \"@noble/curves\": 1.3.0\n+    \"@noble/hashes\": 1.3.3\n+    \"@scure/bip32\": 1.3.3\n+    \"@scure/bip39\": 1.2.2\n+  checksum: 7f9c14f868a588641179cace3eb86c332c4743290865db699870710253cabc4dc74bd4bce5e7bc6db667482e032e94d6f79521219eb6be5dc422059d279a27b7\n+  languageName: node\n+  linkType: hard\n+\n \"ethereumjs-tx@npm:^1.3.4\":\n   version: 1.3.7\n   resolution: \"ethereumjs-tx@npm:1.3.7\"\n"
}